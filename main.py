import httpx
import time
from engine import session, User

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
GREEN_API_ID ="7105259866"
GREEN_API_TOKEN = '2e3c9fbb79db4f8da8fb516fc8c0e5346d44401551cf4e5881'#"2e3c9fbb79db4f8da8fb516fc8c0e5346d44401551cf4e5881"
BASE_URL = f"https://7105.api.greenapi.com/waInstance{GREEN_API_ID}"
DELAY = 2

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
STATE_WAIT_NAME = "wait_name"
STATE_WAIT_PHONE = "wait_phone"
STATE_WAIT_PHOTO_FRONT = "wait_photo_front"
STATE_WAIT_PHOTO_BACK = "wait_photo_back"
STATE_DONE = "done"

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
user_states = {}      # chat_id -> state
user_data = {}        # chat_id -> collected data

def reset_user(user_id):
    user_states.pop(user_id, None)
    user_data.pop(user_id, None)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def get_notification():
    url = f"{BASE_URL}/receiveNotification/{GREEN_API_TOKEN}"
    try:
        response = httpx.get(url, timeout=15)
        # print(response.json())
        return response.json() if response.status_code == 200 else None
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è:", e)
        return None

# –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def delete_notification(receipt_id):
    url = f"{BASE_URL}/deleteNotification/{GREEN_API_TOKEN}/{receipt_id}"
    try:
        httpx.delete(url)
    except:
        pass

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
def send_message(chat_id, text):
    url = f"{BASE_URL}/sendMessage/{GREEN_API_TOKEN}"
    payload = {
        "chatId": chat_id,
        "message": text
    }
    try:
        httpx.post(url, json=payload)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", e)


def send_image(chat_id, image_url, caption=""):
    url = f"{BASE_URL}/sendFileByUrl/{GREEN_API_TOKEN}"
    payload = {
        "chatId": chat_id,
        "urlFile": image_url,
        "fileName": "document.jpg",
        "caption": caption
    }
    try:
        httpx.post(url, json=payload)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:", e)


# FSM –ª–æ–≥–∏–∫–∞
def handle_message(user_id, chat_id, message_type, content):
    if not user_id or not chat_id:
        print("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id –∏–ª–∏ chat_id")
        return

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    state = user_states.setdefault(user_id, None)
    data = user_data.setdefault(user_id, {})

    print(f"‚û°Ô∏è [{user_id}] –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state} | –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")

    if message_type == "text":
        text = content.strip()

        if text.lower() == "/show":
            users = session.query(User).all()
            if not users:
                send_message(chat_id, "–ë–∞–∑–∞ –ø—É—Å—Ç–∞.")
                return
            for u in users:
                msg = (
                    f"üë§ –§–ò–û: {u.fio}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {u.phone}\n"
                    f"üñº –§–æ—Ç–æ (–ª–∏—Ü–æ): {u.photo_front}\n"
                    f"üñº –§–æ—Ç–æ (–æ–±–æ—Ä–æ—Ç): {u.photo_back}\n"
                    "‚Äî‚Äî‚Äî"
                )
                send_message(chat_id, msg)
            return

        if text.lower() == "/start":
            user_states[user_id] = STATE_WAIT_NAME
            user_data[user_id] = {}
            send_message(chat_id, "Bienvenido! Introduce su Nombre y Apellido:")
            return

        if state == STATE_WAIT_NAME:
            data["fio"] = text
            user_states[user_id] = STATE_WAIT_PHONE
            send_message(chat_id, "Gracias! Ahora introduce su numero de contacto +34—Ö—Ö—Ö—Ö—Ö—Ö—Ö")
            return

        elif state == STATE_WAIT_PHONE:
            if not text.replace("+", "").isdigit():
                send_message(chat_id, "Por favor, ingrese un n√∫mero v√°lido con +34...")
                return
            data["phone"] = text
            user_states[user_id] = STATE_WAIT_PHOTO_FRONT
            send_message(chat_id, "Env√≠e una foto del anverso del documento (DNI/NIE)")
            return

        elif state == STATE_DONE:
            send_message(chat_id, "Registro completado. Escriba /start para solicitar su permiso de pesca!")
            return

        else:
            send_message(chat_id, "Hola! Escriba /start para solicitar tu permiso de pesca!")
            return

    elif message_type == "image":
        url = content

        if state == STATE_WAIT_PHOTO_FRONT:
            data["photo_front"] = url
            user_states[user_id] = STATE_WAIT_PHOTO_BACK
            send_message(chat_id, "Recibido! Ahora env√≠e una foto del reverso del documento (DNI/NIE)")
            return

        elif state == STATE_WAIT_PHOTO_BACK:
            data["photo_back"] = url
            user_states[user_id] = STATE_DONE

            new_user = User(
                chat_id=user_id,
                fio=data.get("fio"),
                phone=data.get("phone"),
                photo_front=data.get("photo_front"),
                photo_back=data.get("photo_back")
            )
            session.merge(new_user)
            session.commit()

            send_message(chat_id, "‚úÖTu solicitud fue enviada con exito! En breve contactamos con usted!")
            reset_user(user_id)
            return

        else:
            send_message(chat_id, "Hola! Escriba /start para solicitar tu permiso de pesca!")
            return



# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
def main():
    print("ü§ñ FSM-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    while True:
        data = get_notification()
        if data:
            receipt_id = data.get("receiptId")
            body = data.get("body", {})
            sender_data = body.get("senderData", {})
            sender_id = sender_data.get("sender")  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 7707XXXXXXX@c.us
            chat_id = sender_data.get("chatId")    # –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç

            message_data = body.get("messageData", {})
            msg_type = message_data.get("typeMessage")

            if msg_type == "textMessage":
                text = message_data.get("textMessageData", {}).get("textMessage")
                if text and sender_id and chat_id:
                    print(f"[{sender_id}] –¢–µ–∫—Å—Ç: {text}")
                    handle_message(sender_id, chat_id, "text", text)

            elif msg_type == "imageMessage":
                media_url = message_data.get("fileMessageData", {}).get("downloadUrl")
                if media_url and sender_id and chat_id:
                    print(f"[{sender_id}] –§–æ—Ç–æ: {media_url}")
                    handle_message(sender_id, chat_id, "image", media_url)

            if receipt_id:
                delete_notification(receipt_id)

        time.sleep(DELAY)

if __name__ == "__main__":
    # get_notification()
    main()
# –Ω–µ —Ä–∞–±–æ–∞—Ç–µ—Ç 